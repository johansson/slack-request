#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("slack-request:server");

var http = require("http");
var https = require("https");
var fs = require("fs");

// eslint-disable-next-line no-unused-vars
const _options = {
    key: fs.readFileSync("/Users/will/.config/ssl/localhost.key"),
    cert: fs.readFileSync("/Users/will/.config/ssl/localhost.cert"),
    requestCert: false,
    rejectUnauthorized: false,
};

/**
 * Get port from environment and store in Express.
 */

var port = typeof (options) !== "undefined" ? "443" : normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

// eslint-disable-next-line no-undef
var server = typeof (options) !== "undefined" ? https.createServer(options, app) : http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        // eslint-disable-next-line no-console
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
    case "EADDRINUSE":
        // eslint-disable-next-line no-console
        console.error(bind + " is already in use");
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}
